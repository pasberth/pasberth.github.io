リーダブルコードを読んだ
================================================================================

リーダブルコードを読んだ．完全に良書だった．
書評ってわけじゃないけど，思った事をつらつら書く．

まず，リーダブルコードまとめ:

1. 理解しやすいコードを書こう
2. 名前をコメントのように使おう
3. 誤解されない名前をつけよう
4. たとえば (=) の位置でプログラムを揃えたりしたほうが読みやすい．
5. コメントは必要な事だけを．
   ムダなコメントはかえってプログラムを読みにくくする．
6. コメントは正確に．あいまいなコメントは悪．
7. 大きな式は名前をつけて分割する．
   変数をつくると読みやすくなる．
8. 変数のつくりすぎは読むのが大変．
   (7)と矛盾した事を言っているようだけど，バランスが大事．
9. 小さくて汎用的な関数をたくさんつくる
10. 1度に処理する事はひとつ
11. コードを自然言語で読み上げてみる
12. コードは短い方がいい．
13. 1行のテストを書こう．

**名前は短いコメントだと思え** ，と書いてあった．
たしかにそれはそうだ．形式言語であらわしようのない曖昧な概念が自然言語には
たくさんある．たとえば単語の微妙な意味合いの違いまではプログラミング言語で
あらわせないから，名前に英語としての意味を持たせたほうがいいというのは多いに
同意だ．しかし，名前に **ms** (millisecond) とか **secs** (second)
とかいう単位を埋め込むとよい，というのは完全に間違っていると思う．これは
型であらわすべきだ． typedef でもいいから， ms_t や secs_t をつくるべきだ．
そうすれば， ms や secs が処理系にとっては役に立たないメタデータから，
静的型へと昇華して，もっと機械的に処理しやすくなる．コンパイル時に型が
合っていなければエラーにできる．動的言語では例外だけど， C++ では，
struct を使ったって組み込み型に比べてオーバーヘッドがあるわけでもない
(合ってる?) し，型にすべきだ．


コードのキレイさ(これは形式的に説明できる感覚ではない)を気にする人なら，
誰でもコードを整形するものだ．たとえば，代入処理の際， (=) の記号を縦に
並べると読みやすいと感じる．これをしたほうがいいというのも完全に同意だ．


変数のスコープに関して．リーダブルコードでは「スコープの広い変数があると
処理を追うのが大変だ」と書かれている．これも完全に同意だ．また，
インスタンス変数を，「ミニグローバル変数」とあらわして，
やはりインスタンス変数も少ない方がよいと言っている．これも同意だ．
さらには，「同じ変数には一度しか代入しない」と言っている．
関数型言語を崇拝しているので，やはり同意だ．


コードをできるだけ削ったほうがよい．使ってないコードは削除したほうが
よい．これも完全に同意だった．


全体として感じた事:

プログラミング言語では，スコープというのはかなり本質的な問題だと思う．
クラスや，インスタンスを，オブジェクト指向erは「物」とか言い表すが，
クラスやインスタンスのもっとも大事な機能はスコープに関する問題だと思う．
インスタンスメソッドなんかは，インスタンスがあるときだけ import されている
関数に見える．スコープは変数や関数がどの程度の範囲に見えるかを解決し，
プログラマがコードを読む時にいちばん大事な要素はこのスコープだと思うワケである．
変数の名前や，関数の名前はたしかに大事だが，もっと根本的な問題として，スコープが
いちばん重要だと思うワケである．リーダブルコードでは， tmp という名前は悪だが，
たとえば， 3,4行の if のブロックの中で tmp を使うのはよいとされている．それは，
**その変数がどのように使われるか** が，名前(というコメント)を頼らずとも，コード
だけで完全にわかるからである．そして，クラスやオブジェクトは，たんなるスコープを解決する
機能としてはすこし複雑すぎると思う．ゆえに，オブジェクト指向言語は，
本質的にリーダブルじゃないと思う．スコープが複雑すぎるからだ．このあたりに関して，
ぼくは，関数型言語の module という単位が落としどころだと思う．それ以上，スコープを
複雑にしても，理解が困難になるだけだ．

コードを読む上でも， immutable はやはり大事な要素だ．これはリーダブルコードでも
触れられている． mutable な要素はグローバル変数と同じで，時と場合を選んで慎重に
使うべきで，すべての変数が mutable というのはおかしいと思う．
immutable をデフォルトにしていない言語は根本から間違っていると思う．
