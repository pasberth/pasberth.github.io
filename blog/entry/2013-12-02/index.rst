参照カウンタ GC を実装してみる
================================================================================

インタプリタを実装するにせよ，コンパイラを実装するにせよ，
GC を実装することは一種のロマンだと思う． GC の実装をせずとも言語はつくれる．もし GC
が存在する言語で，インタプリタを実装するならば，その言語の GC に頼れば， GC を実装する必要は
ない． altJS のように，ターゲットとなる言語に GC が搭載されているならば， GC を実装せずとも
コンパイラを実装できる．むしろ，そのほうが理想的だと思う．しかし，そういう方法があるにも関わ
らず，あえて GC も実装してみたいと思う気持ちがある．なぜだろうか，吸い寄せられる感じだ．

GC の勉強をまったくしてないわけではない．いちおう 参照カウンタとか Mark&Sweep とか
世代別 GC とかの知識をもってはいた．でも，実装したことはなかった．必要がなかったからだ．
Haskell で実装したインタプリタに， GC を搭載する必要はない． Haskell が既に GC をもっている
からだ．でも，やっぱり，試しに GC だけ実装してみることにした．

そういうわけで， GC だけを実装してみる．今回はいちばん簡単だと思われる 参照カウンタからする．
その次が Mark&Sweep だけど，今回は実装しない．ひとつずつ段階を踏んでゆく．

次のようなルーチンを用意する． gc_alloc 関数は， gc でマネジメントされる領域を
確保する．戻り値は gc_heap_t になる． gc_refer 関数は参照カウントをひとつ増やすルーチンで，
たとえば，インタプリタが代入する操作などをおこなって，新しくその変数に代入されるオブジェクトが
あとから参照できる状態になったとき， gc_refer(その新しいオブジェクト) のようにして 1回呼ばれるということにする．
gc_leave 関数は参照カウンタをひとつ減らすルーチンで，たとえば，
代入する操作などをおこなって， 古いオブジェクト があとから参照できない
状態になったとき， gc_leave(古いオブジェクト) のようにして1回呼ばれるということにする．
言葉ではわかりにくいから例示すると，

.. code::

   x = a // gc_refer(a) が実行される
   x = b // gc_leave(a) と gc_refer(b) が実行される

のようになるわけである．

.. literalinclude:: gc.h
   :language: c
   :linenos:

次に実装の話をする．まず参照カウンタをどのように保持するかが問題になる．
参照カウンタの GC では，オブジェクト毎に参照カウンタをもっているから，それをどう表現するか
だ． gc_heap_t を，参照カウンタと，実体であるポインタを持つ構造体のポインタにして，
gc_refer や gc_leave にはその構造体のポインタを渡すという手もある．
しかし，そうしてはあまりにも使いにくい．今回は， gc_heap_t は単に void * のエイリアスだと
いうことにする．では，いったいどうやって参照カウンタを保持するのかというと，
その gc_heap_t - 1 の位置に保存しておくのだ． 1バイトしか値を保存しておけないから，
参照カウンタの限界は 255 だ．だからたくさん参照されてしまうと溢れて誤動作する可能性もあるけど，
今回の GC は実用を考えたものでもないし，まあよしとする．

あとは素直な実装になる．実際にコードを読むのがいちばん速いだろう．

.. literalinclude:: gc.c
   :language: c
   :linenos:
