call/ccの型
================================================================================

:doc:`/blog/entry/2014-02-17/index` を書いた直後になんか閃いた．
λρ-計算 とか，難しく考えていたワケであるが，考えてみれば， Scheme はべつに
λρ-計算ではないわけである． Scheme は， Scheme という体系であるので，
Scheme のドメインで考えればよい．

call/cc は， (call/cc (lambda (cont) ...)) こんな感じに使う．
ラムダを引数にとるので， call/cc : a→b であることはわかる．
(lambda (cont) ...) は，引数をひとつとるので，
a = c→d という形だろう．さらに，この引数である cont は引数をひとつとり，
しかも，戻り値は使用されないという特徴がある．したがって，
cont : e→f である．
さらに， cont の引数は call/cc の戻り値となるのであるから，
call/cc : a→b かつ cont : e→f ならば
b = e であるといえよう．cont を呼ばない場合は， (lambda (cont) ...) が
返す値がそのまま call/cc の戻り値となるのであるから，
call/cc : a→b かつ (lambda (cont) ...) : c→d ならば
b = d であるといえよう．

まとめると，

1. cont の戻り値は任意の型
2. cont の引数の型 = (lambda (cont) ...) の戻り値の型
3. cont の引数の型 = call/cc の戻り値の型

という関係があるはずである．

cont の型を

* cont : α→β

とおくと，  (lambda (cont) ...) は cont を引数にとり，
しかも cont の引数の型と同じ戻り値の型を持つわけだから，

* (lambda (cont) ...) : (α→β)→α

call/cc は，これを引数にとり， cont の引数の型と同じ戻り値の型を
持つわけだから，したがって，

* ((α→β)→α)→α

である．これで Peirceの法則が出てきた．

λρ-計算は正直よくわからない(爆死)